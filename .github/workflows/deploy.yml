name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: heraldethan/finance-tracker
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run tests
        run: |
          docker build -t finance-tracker .
          docker run finance-tracker npm test || true
  
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            AUTH_SECRET=${{ secrets.AUTH_SECRET }}
            AUTH_DISCORD_ID=${{ secrets.AUTH_DISCORD_ID }}
            AUTH_DISCORD_SECRET=${{ secrets.AUTH_DISCORD_SECRET }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove old container
            docker stop finance-tracker || true
            docker rm finance-tracker || true
            
            # Run new container
            docker run -d \
              --name finance-tracker \
              --restart unless-stopped \
              -p 80:3000 \
              -e NODE_ENV=production \
              ${{ env.IMAGE_NAME }}:latest
            
            # Clean up old images
            docker image prune -f